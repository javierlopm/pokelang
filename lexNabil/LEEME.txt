-- .---------------------------------------------------------------------------.

"Lanscii" - CI3675 - Etapa II
Análisis Sintáctico

Autores: 10-11121 - Edward Fernández.
	  	 11-10683 - Nabil J. Márquez.

Fecha: 31/05/2015

Descripción: "En esta tercera etapa es necesario implementar una estructura de
			  Tabla de Simbolos. A su vez, realizar comprobaciones de alcance,
			  de redeclaraciones, de tipos-operadores y finalmente asignaciones
			  de variables de iteracion".

Estado actual del proyecto: 
	"	Estructura para Tabla de Simbolos completa. Realiza los chequeos necesarios.
		
		

		Falta reestructurar la tabla de simbolos para que admita una formación jerarquica
		accesible desde todos los niveles. Con la estructura actual, a pesar de poseer tablas
		padres e hijas, las hijas no tienen posible actualizar al padre.
		
		Falta modificar funciones para que admitan esta nueva estructura.
		
		Falta modificar las funciones de chequeo para que actualicen los valores en la tabla
		a medida que se realice el chequeo.

	    Todas las deudas técnicas serán realizadas para la próxima entrega ya que en esta es 
	    donde serán requeridas."

-- .---------------------------------------------------------------------------.

Errores presentados:

1) Errores básicos en la sintaxis de Happy debido a la inexperticia con el mismo. 
   Especialmente en la implementación de los métodos para imprimir el árbol deseado.

2) Errores en la definición de la precedencia de los operadores a utilizar.
   
   Solucionado luego de estudiar detenidamente la documentación de Happy.

3) Errores de Shift/Reduce y Reduce/Reduce al definir la gramática a utilizar en
   el parser.
   
   Solucionado luego de estudiar la documentación de Happy y las clases vistas en 
   la asignatura CI3725.  

4) Error en el Makefile mientras ocurria la adaptación a los comandos de GHC. 

5) Error en el formato de impresión del árbol.

6) Errores de compatibilidad de tipos. En especial en su definición e impresión. 

Consideraciones y Detalles de implementación:

1) "Esta fase del proyecto fue implementado utilizando The Glorious 
	Glasgow Haskell Compilation System (GHC), version 7.4.1"

2) "Se requiere el acceso a la librería System para el correcto funcionamiento 
	de esta fase del proyecto."

3) "Lanscii.hs posee una funcion getFilename que simplemente obtiene el nombre 
	del archivo pasado como argumento al ejecutar Lascii."

4) "Se implementó esta etapa asumiendo un contrato de siempre colocar el nombre
	del archivo a estudiar correctamente (y siempre colocarlo)."

5) "Lanscii.hs solo recibe el nombre del archivo para llamar al Lexer, que se 
    encargará de generar una lista de tokens para luego llamar al Parser. "

6) "Parser.y contiene las diferentes gramáticas y funciones requeridas para el 
	estudio de la lista de tokens generada por el Lexer.

7) "El comando make clean permite borrar las librerias intermedias creadas al 
	momento de compilar."

8) "Al correr ./Lanscii nombredearchivo se ejecuta el análisis de parser, mostrando el
	primer error sintáxico en caso de que lo haya o, en su defecto, imprimiendo el árbol
	sintático abstracto. En caso de poseer errores lexicográficos, estos se imprimirán en vez
	del árbol."

9) "Debido que el lexer realizaba directamente la impresión de Strings, este se tuvo que
	cambiar ligeramente."

10) "Debido a la falta de ejemplos en el enunciado, el tiempo de implementación efectivo se vio afectado."

11) "La estructura SymbolTable utilizando Haskell no es fácil de idealizar. Nosotros pensamos en ella utilizando
     conversiones a string. Definitivamente no es la mejor solución pero funciona."

12) "Se tuvo que dejar las funciones show por defecto en el AST para efectos de la tabla de simbolos."

13) "Se asume, como se aclaró en consulta, que la iteración For establece una nueva tabla de simbolos cuya
     unica declaracion nueva esta conformada con la variable de iteración."

14) "Es necesario realizar cambios en la estructura jerarquica utilizada para que esta admita actualizacion de
     valores en la futura entrega."

15) "En los casos de asignaciones de variables no declaradas o expresiones que poseen errores de tipos o alcance, solo se muestra
     uno de los dos errores más no ambos. Ello aparte del error de alcance de la variable. Se muestra que no se puede asignar valores a variables no declaradas o (exclusivamente) que no se puede asignar un valor de tipo indefinido a una variable."

Haskell es un lenguaje versatil y útil, requiere trabajo para adaptarse así como para realizar implementación de muchas
estructuras ya conocidas, pero muestra grandes resultados.

-- .---------------------------------------------------------------------------.
